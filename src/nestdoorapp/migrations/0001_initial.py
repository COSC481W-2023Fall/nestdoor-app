# Generated by Django 4.2.6 on 2023-11-04 15:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('building_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('datetime_added', models.DateTimeField()),
                ('number_mentions', models.IntegerField()),
                ('address', models.TextField()),
                ('gps_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('gps_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('datetime_added', models.DateTimeField()),
                ('number_mentions', models.IntegerField()),
                ('gps_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('gps_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('description', models.TextField()),
                ('building_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.building')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('addr', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('datetime_posted', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='React',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('detail', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('reply_id', models.AutoField(primary_key=True, serialize=False)),
                ('datetime_posted', models.DateTimeField()),
                ('content', models.TextField()),
                ('datetime_last_edited', models.DateTimeField(null=True)),
                ('datetime_last_moderated', models.DateTimeField(null=True)),
                ('moderated_note', models.TextField()),
                ('for_post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.post')),
                ('for_reply_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.reply')),
                ('last_moderated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies_last_moderated', to=settings.AUTH_USER_MODEL)),
                ('posted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LocationReply',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.location')),
                ('reply_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.reply')),
            ],
        ),
        migrations.CreateModel(
            name='LocationPost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.location')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.post')),
            ],
        ),
        migrations.CreateModel(
            name='BuildingReply',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('building_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.building')),
                ('reply_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.reply')),
            ],
        ),
        migrations.CreateModel(
            name='BuildingPost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('building_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.building')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nestdoorapp.post')),
            ],
        ),
        migrations.AddConstraint(
            model_name='building',
            constraint=models.CheckConstraint(check=models.Q(('address__isnull', False)), name='building_address_missing'),
        ),
        migrations.AddConstraint(
            model_name='building',
            constraint=models.CheckConstraint(check=models.Q(('description__isnull', False)), name='building_description_missing'),
        ),
        migrations.AddConstraint(
            model_name='reply',
            constraint=models.CheckConstraint(check=models.Q(('content__isnull', False)), name='reply_content_missing'),
        ),
        migrations.AddConstraint(
            model_name='reply',
            constraint=models.CheckConstraint(check=models.Q(('moderated_note__isnull', False)), name='reply_moderation_content_missing'),
        ),
        migrations.AddConstraint(
            model_name='reply',
            constraint=models.CheckConstraint(check=models.Q(('reply_id__isnull', False)), name='reply_id_missing'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('content__isnull', False)), name='post_content_missing'),
        ),
        migrations.AddConstraint(
            model_name='locationreply',
            constraint=models.CheckConstraint(check=models.Q(('id__isnull', False)), name='locationreply_id_missing'),
        ),
        migrations.AddConstraint(
            model_name='locationpost',
            constraint=models.CheckConstraint(check=models.Q(('id__isnull', False)), name='locationpost_id_missing'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('building_id__isnull', False), models.Q(('gps_longitude__isnull', False), ('gps_latitude__isnull', False)), _connector='OR'), name='location_building_or_gps_coords'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('description__isnull', False)), name='location_description_missing'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('location_id__isnull', False)), name='location_id_missing'),
        ),
        migrations.AddConstraint(
            model_name='buildingreply',
            constraint=models.CheckConstraint(check=models.Q(('id__isnull', False)), name='buildingreply_id_missing'),
        ),
        migrations.AddConstraint(
            model_name='buildingpost',
            constraint=models.CheckConstraint(check=models.Q(('id__isnull', False)), name='buildingpost_id_missing'),
        ),
    ]
